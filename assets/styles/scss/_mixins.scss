// Flexbox display @include flexbox;
@mixin flexbox {
 display: -webkit-box;
 display: -moz-box;
 display: -ms-flexbox;
 display: -webkit-flex;
 display: flex;
}
//flexContainer @include flexContainer(row,space-between,center);
@mixin flexContainer($direction,$justify,$align) {
 display: flex;
 flex-direction: $direction;
 justify-content: $justify;
 align-items: $align;
}
// Align-items flexbox @include align-items(?)
@mixin align-items($value: stretch) {
 @if $value == flex-start {
   -webkit-box-align: start;
   -moz-box-align: start;
   -ms-flex-align: start;
 } @else if $value == flex-end {
   -webkit-box-align: end;
   -moz-box-align: end;
   -ms-flex-align: end;
 } @else {
   -webkit-box-align: $value;
   -moz-box-align: $value;
   -ms-flex-align: $value;
 }
 -webkit-align-items: $value;
 align-items: $value;
}
// justify-content flexbox @include justify-content(?)
@mixin justify-content($value: flex-start) {
 @if $value == flex-start {
   -webkit-box-pack: start;
   -moz-box-pack: start;
   -ms-flex-pack: start;
 } @else if $value == flex-end {
   -webkit-box-pack: end;
   -moz-box-pack: end;
   -ms-flex-pack: end;
 } @else if $value == space-between {
   -webkit-box-pack: justify;
   -moz-box-pack: justify;
   -ms-flex-pack: justify;
 } @else if $value == space-around {
   -ms-flex-pack: distribute;
 } @else {
   -webkit-box-pack: $value;
   -moz-box-pack: $value;
   -ms-flex-pack: $value;
 }
 -webkit-justify-content: $value;
 justify-content: $value;
}
// flex-direction flexbox @include flex-direction(?)
@mixin flex-direction($direction: row) {
 @if $direction == row-reverse {
   -webkit-box-direction: reverse;
   -webkit-box-orient: horizontal;
   -moz-box-direction: reverse;
   -moz-box-orient: horizontal;
 } @else if $direction == column {
   -webkit-box-direction: normal;
   -webkit-box-orient: vertical;
   -moz-box-direction: normal;
   -moz-box-orient: vertical;
 } @else if $direction == column-reverse {
   -webkit-box-direction: reverse;
   -webkit-box-orient: vertical;
   -moz-box-direction: reverse;
   -moz-box-orient: vertical;
 } @else {
   -webkit-box-direction: normal;
   -webkit-box-orient: horizontal;
   -moz-box-direction: normal;
   -moz-box-orient: horizontal;
 }
 -webkit-flex-direction: $direction;
 -ms-flex-direction: $direction;
 flex-direction: $direction;
}
// flexbox @include flexcontainer(column, justify-content, center)
@mixin flexcontainer($direction, $justify, $align) {
 display: flex;
 flex-direction: $direction;
 justify-content: $justify;
 align-items: $align;
}
// backdrop-filter @include backdrop-filter(?px,?)
@mixin backdrop-filter($blur, $brightness) {
 -webkit-backdrop-filter: blur($blur) brightness($brightness);
 backdrop-filter: blur($blur) brightness($brightness);
}
// backdrop-filter With Opacity @include backdrop-filter(?px,?,?)
@mixin backdrop-filter-opacity($blur, $brightness, $opacity) {
 -webkit-backdrop-filter: blur($blur) brightness($brightness) opacity($opacity);
 backdrop-filter: blur($blur) brightness($brightness) opacity($opacity);
}
// backdrop-filter @include background-opacity(#??????,.?)
@mixin background-opacity($color, $opacity) {
 background: $color;
 background: rgba($color, $opacity);
}
// box-shadow @include box-shadow(?px,?px,?px,#??????)
@mixin box-shadow($left, $top, $radius, $color) {
 box-shadow: $left $top $radius $color;
 -webkit-box-shadow: $left $top $radius $color;
 -moz-box-shadow: $left $top $radius $color;
}
// transition @include transition(color?,?s or ?ms,linear?)
@mixin transition($property, $duration, $easing: linear) {
 transition: $property $duration $easing;
 -webkit-transition: $property $duration $easing;
 -moz-transition: $property $duration $easing;
}
// border-radius @include border-radius(?px)
@mixin border-radius($radius) {
 border-radius: $radius;
 -webkit-border-radius: $radius;
 -moz-border-radius: $radius;
}
// border-radius all direction @include border-radii(?px,?px,?px,?px)
@mixin border-radii($topleft, $topright, $bottomright, $bottomleft) {
 border-top-left-radius: $topleft;
 border-top-right-radius: $topright;
 border-bottom-right-radius: $bottomright;
 border-bottom-left-radius: $bottomleft;
 -webkit-border-top-left-radius: $topleft;
 -webkit-border-top-right-radius: $topright;
 -webkit-border-bottom-right-radius: $bottomright;
 -webkit-border-bottom-left-radius: $bottomleft;
 -moz-border-radius-topleft: $topleft;
 -moz-border-radius-topright: $topright;
 -moz-border-radius-bottomright: $bottomright;
 -moz-border-radius-bottomleft: $bottomleft;
}
// transform @include transform(translateY(-50%)?);
@mixin transform($transforms) {
 -webkit-transform: $transforms;
 -moz-transform: $transforms;
 -ms-transform: $transforms;
 transform: $transforms;
}
//Padding mixin @include padding(?px,?px,?px,?px)
@mixin padding($top, $right, $bottom, $left) {
 padding-top: $top;
 padding-right: $right;
 padding-bottom: $bottom;
 padding-left: $left;
}
//Margin mixin @include margin(?px,?px,?px,?px)
@mixin margin($top, $right, $bottom, $left) {
 margin-top: $top;
 margin-right: $right;
 margin-bottom: $bottom;
 margin-left: $left;
}
//flex-wrap mixin @include flex-wrap(?)
@mixin flex-wrap($value: nowrap) {
 // No Webkit/FF Box fallback.
 -webkit-flex-wrap: $value;
 @if $value == nowrap {
   -ms-flex-wrap: none;
 } @else {
   -ms-flex-wrap: $value;
 }
 flex-wrap: $value;
}
//border mixin @include border(top?,px?,solid?,#???)
@mixin border($direction, $width, $style, $color) {
 @if $direction == all {
   border: $width $style $color;
 } @else if $direction != all {
   border-#{$direction}: $width $style $color;
 }
}
//@include reset-list()
@mixin reset-list {
 margin: 0;
 padding: 0;
 list-style: none;
}
//@include square(100px,$radius: 10px)
@mixin square($size, $radius: 0) {
 width: $size;
 height: $size;

 @if $radius != 0 {
   border-radius: $radius;
 }
}
//@include pseudo();
@mixin pseudo($display: block, $pos: absolute, $content: "") {
 content: $content;
 display: $display;
 position: $pos;
}
//@include css-triangle(#???,top?,..?)
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
 @include pseudo($pos: $position);
 width: 0;
 height: 0;
 @if $round {
   border-radius: 3px;
 }
 @if $direction == down {
   border-left: $size solid transparent;
   border-right: $size solid transparent;
   border-top: $size solid $color;
   margin-top: 0 - round($size / 2.5);
 } @else if $direction == up {
   border-left: $size solid transparent;
   border-right: $size solid transparent;
   border-bottom: $size solid $color;
   margin-bottom: 0 - round($size / 2.5);
 } @else if $direction == right {
   border-top: $size solid transparent;
   border-bottom: $size solid transparent;
   border-left: $size solid $color;
   margin-right: -$size;
 } @else if $direction == left {
   border-top: $size solid transparent;
   border-bottom: $size solid transparent;
   border-right: $size solid $color;
   margin-left: -$size;
 }
}
//@include input-placeholder {color: #000;font-size: 20px;}
@mixin input-placeholder {
 &.placeholder {
   @content;
 }
 &:-moz-placeholder {
   @content;
 }
 &::-moz-placeholder {
   @content;
 }
 &:-ms-input-placeholder {
   @content;
 }
 &::-webkit-input-placeholder {
   @content;
 }
}
//responsive
$breakpoints: (
 "phone": 400px,
 "phone-wide": 480px,
 "phablet": 560px,
 "tablet-small": 640px,
 "tablet": 768px,
 "tablet-wide": 1024px,
 "desktop": 1248px,
 "desktop-wide": 1440px,
);
//@include mq('tablet-wide') {padding-top: 4rem;font-size: 2.4rem;}
@mixin mq($width, $type: max) {
 @if map_has_key($breakpoints, $width) {
   $width: map_get($breakpoints, $width);
   @if $type == max {
     $width: $width - 1px;
   }
   @media only screen and (#{$type}-width: $width) {
     @content;
   }
 }
}
//@include vertical-center()
@mixin vertical-center($position: relative) {
 position: $position;
 top: 50%;
 -ms-transform: translateY(-50%);
 -webkit-transform: translateY(-50%);
 transform: translateY(-50%);
}
@mixin abs-center(){
 position: absolute;
 top: 50%;
 left: 50%;
 -ms-transform: translate(-50%, -50%);
 -webkit-transform: translate(-50%, -50%);
 transform: translate(-50%, -50%);
}
//@include @include keyframes(background) {0% {background: white;}50% {background: lightblue;}100% {background: royalblue;} }
@mixin keyframes($name) {
 @-webkit-keyframes #{$name} {
   @content;
 }
 @-moz-keyframes #{$name} {
   @content;
 }
 @keyframes #{$name} {
   @content;
 }
}
//@include abs-position(100px, 100px, auto, auto);
@mixin abs-position($top, $right, $bottom, $left) {
 position: absolute;
 top: $top;
 right: $right;
 bottom: $bottom;
 left: $left;
}
// Font Size @include font-size(14);
@mixin font-size($size: 12, $base: 16) {
 font-size: $size + px;
 font-size: ($size / $base) * 1rem;
}
// Line Height @include line-height(16);
@mixin line-height($height: 12, $base: 16) {
 line-height: $height + px;
 line-height: ($height / $base) * 1rem;
}
//scrollbars  @include scrollbars(10px, pink, red);
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
 &::-webkit-scrollbar {
   width: $size;
   height: $size;
 }
 &::-webkit-scrollbar-thumb {
   background: $foreground-color;
 }
 &::-webkit-scrollbar-track {
   background: $background-color;
 }
 & {
   scrollbar-face-color: $foreground-color;
   scrollbar-track-color: $background-color;
 }
}
@mixin user-select($property){
  -webkit-user-select: $property;
  -moz-user-select: $property;
  -ms-user-select: $property;
  user-select: $property;
}